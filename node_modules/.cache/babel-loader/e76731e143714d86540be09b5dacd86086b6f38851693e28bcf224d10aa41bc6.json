{"ast":null,"code":"import Vue from 'vue';\nimport VueRouter from 'vue-router';\nimport Layout from '@/views/layout';\nimport Login from '@/views/login';\nimport MyOrder from '@/views/myorder';\nimport Pay from '@/views/pay';\nimport ProdeTail from '@/views/prodetail';\nimport Search from '@/views/search/index.vue';\nimport SearchList from '@/views/search/list.vue';\nimport AddRess from '@/views/pay/address';\n\n// 二级路由\nimport Home from '@/views/layout/home';\nimport Category from '@/views/layout/category';\nimport Cart from '@/views/layout/cart';\nimport User from '@/views/layout/user';\nimport store from '@/store';\nVue.use(VueRouter);\nconst router = new VueRouter({\n  routes: [{\n    path: '/',\n    component: Layout,\n    redirect: '/home',\n    children: [{\n      path: '/home',\n      component: Home\n    }, {\n      path: '/category',\n      component: Category\n    }, {\n      path: '/cart',\n      component: Cart\n    }, {\n      path: '/user',\n      component: User\n    }]\n  }, {\n    path: '/Login',\n    component: Login\n  }, {\n    path: '/myorder',\n    component: MyOrder\n  }, {\n    path: '/pay',\n    component: Pay\n  },\n  // 动态路由传参，传递商品id\n  {\n    path: '/prodetail/:id',\n    component: ProdeTail\n  }, {\n    path: '/search',\n    component: Search\n  }, {\n    path: '/searchlist',\n    component: SearchList\n  }, {\n    path: '/address',\n    component: AddRess\n  }]\n});\n// 所有的路由在被真正访问之前(解析渲染到对用组件页面之前),都会经过全局路由前置守卫,只有前置守卫放行了,才会到达对应页面\n// 全局前置导航守卫\n// to : 到哪里去,到哪去的完整路由信息对象(路径,参数)\n// from: 从哪里来,从哪里来的完整路由信息对象(路径,参数)\n// next: 是否放行\n// 1.next() 直接放行,放行到to要去的路径.\n// 2.next(路径) 进行拦截，拦截到next里面配置的路径\nconst authUrls = ['/pay', '.myorder'];\nrouter.beforeEach((to, from, next) => {\n  // console.log(to, from, next)\n  // 看to.path是否在authUrls中出现过\n  if (!authUrls.includes(to.path)) {\n    // 非权限页面,直接放行\n    next();\n    return;\n  }\n  const token = store.state.user.userInfo.token;\n  // 权限页面，需要判断token\n  if (token) {\n    next();\n  } else {\n    next('/login');\n  }\n});\nexport default router;","map":{"version":3,"names":["Vue","VueRouter","Layout","Login","MyOrder","Pay","ProdeTail","Search","SearchList","AddRess","Home","Category","Cart","User","store","use","router","routes","path","component","redirect","children","authUrls","beforeEach","to","from","next","includes","token","state","user","userInfo"],"sources":["E:/文档/VUE/VUE2/shopping-mode/shopping/src/router/index.js"],"sourcesContent":["import Vue from 'vue'\nimport VueRouter from 'vue-router'\nimport Layout from '@/views/layout'\nimport Login from '@/views/login'\nimport MyOrder from '@/views/myorder'\nimport Pay from '@/views/pay'\nimport ProdeTail from '@/views/prodetail'\nimport Search from '@/views/search/index.vue'\nimport SearchList from '@/views/search/list.vue'\nimport AddRess from '@/views/pay/address'\n\n// 二级路由\nimport Home from '@/views/layout/home'\nimport Category from '@/views/layout/category'\nimport Cart from '@/views/layout/cart'\nimport User from '@/views/layout/user'\nimport store from '@/store'\n\nVue.use(VueRouter)\n\nconst router = new VueRouter({\n  routes: [\n    {\n      path: '/',\n      component: Layout,\n      redirect: '/home',\n      children: [\n        { path: '/home', component: Home },\n        { path: '/category', component: Category },\n        { path: '/cart', component: Cart },\n        { path: '/user', component: User }\n      ]\n    },\n    { path: '/Login', component: Login },\n    { path: '/myorder', component: MyOrder },\n    { path: '/pay', component: Pay },\n    // 动态路由传参，传递商品id\n    { path: '/prodetail/:id', component: ProdeTail },\n    { path: '/search', component: Search },\n    { path: '/searchlist', component: SearchList },\n    { path: '/address', component: AddRess }\n  ]\n})\n// 所有的路由在被真正访问之前(解析渲染到对用组件页面之前),都会经过全局路由前置守卫,只有前置守卫放行了,才会到达对应页面\n// 全局前置导航守卫\n// to : 到哪里去,到哪去的完整路由信息对象(路径,参数)\n// from: 从哪里来,从哪里来的完整路由信息对象(路径,参数)\n// next: 是否放行\n// 1.next() 直接放行,放行到to要去的路径.\n// 2.next(路径) 进行拦截，拦截到next里面配置的路径\nconst authUrls = ['/pay', '.myorder']\nrouter.beforeEach((to, from, next) => {\n  // console.log(to, from, next)\n  // 看to.path是否在authUrls中出现过\n  if (!authUrls.includes(to.path)) {\n    // 非权限页面,直接放行\n    next()\n    return\n  }\n  const token = store.state.user.userInfo.token\n  // 权限页面，需要判断token\n  if (token) {\n    next()\n  } else {\n    next('/login')\n  }\n})\n\nexport default router\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,MAAM,MAAM,gBAAgB;AACnC,OAAOC,KAAK,MAAM,eAAe;AACjC,OAAOC,OAAO,MAAM,iBAAiB;AACrC,OAAOC,GAAG,MAAM,aAAa;AAC7B,OAAOC,SAAS,MAAM,mBAAmB;AACzC,OAAOC,MAAM,MAAM,0BAA0B;AAC7C,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,OAAO,MAAM,qBAAqB;;AAEzC;AACA,OAAOC,IAAI,MAAM,qBAAqB;AACtC,OAAOC,QAAQ,MAAM,yBAAyB;AAC9C,OAAOC,IAAI,MAAM,qBAAqB;AACtC,OAAOC,IAAI,MAAM,qBAAqB;AACtC,OAAOC,KAAK,MAAM,SAAS;AAE3Bd,GAAG,CAACe,GAAG,CAACd,SAAS,CAAC;AAElB,MAAMe,MAAM,GAAG,IAAIf,SAAS,CAAC;EAC3BgB,MAAM,EAAE,CACN;IACEC,IAAI,EAAE,GAAG;IACTC,SAAS,EAAEjB,MAAM;IACjBkB,QAAQ,EAAE,OAAO;IACjBC,QAAQ,EAAE,CACR;MAAEH,IAAI,EAAE,OAAO;MAAEC,SAAS,EAAET;IAAK,CAAC,EAClC;MAAEQ,IAAI,EAAE,WAAW;MAAEC,SAAS,EAAER;IAAS,CAAC,EAC1C;MAAEO,IAAI,EAAE,OAAO;MAAEC,SAAS,EAAEP;IAAK,CAAC,EAClC;MAAEM,IAAI,EAAE,OAAO;MAAEC,SAAS,EAAEN;IAAK,CAAC;EAEtC,CAAC,EACD;IAAEK,IAAI,EAAE,QAAQ;IAAEC,SAAS,EAAEhB;EAAM,CAAC,EACpC;IAAEe,IAAI,EAAE,UAAU;IAAEC,SAAS,EAAEf;EAAQ,CAAC,EACxC;IAAEc,IAAI,EAAE,MAAM;IAAEC,SAAS,EAAEd;EAAI,CAAC;EAChC;EACA;IAAEa,IAAI,EAAE,gBAAgB;IAAEC,SAAS,EAAEb;EAAU,CAAC,EAChD;IAAEY,IAAI,EAAE,SAAS;IAAEC,SAAS,EAAEZ;EAAO,CAAC,EACtC;IAAEW,IAAI,EAAE,aAAa;IAAEC,SAAS,EAAEX;EAAW,CAAC,EAC9C;IAAEU,IAAI,EAAE,UAAU;IAAEC,SAAS,EAAEV;EAAQ,CAAC;AAE5C,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMa,QAAQ,GAAG,CAAC,MAAM,EAAE,UAAU,CAAC;AACrCN,MAAM,CAACO,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACpC;EACA;EACA,IAAI,CAACJ,QAAQ,CAACK,QAAQ,CAACH,EAAE,CAACN,IAAI,CAAC,EAAE;IAC/B;IACAQ,IAAI,CAAC,CAAC;IACN;EACF;EACA,MAAME,KAAK,GAAGd,KAAK,CAACe,KAAK,CAACC,IAAI,CAACC,QAAQ,CAACH,KAAK;EAC7C;EACA,IAAIA,KAAK,EAAE;IACTF,IAAI,CAAC,CAAC;EACR,CAAC,MAAM;IACLA,IAAI,CAAC,QAAQ,CAAC;EAChB;AACF,CAAC,CAAC;AAEF,eAAeV,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}