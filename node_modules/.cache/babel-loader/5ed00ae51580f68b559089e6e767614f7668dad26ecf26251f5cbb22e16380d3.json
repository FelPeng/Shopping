{"ast":null,"code":"import { changeCount, getCartList } from '@/api/cart';\nexport default {\n  namespaced: true,\n  state() {\n    return {\n      cartList: []\n    };\n  },\n  mutations: {\n    // 提供一个设置cartList 的mutation\n    setCartList(state, newList) {\n      state.cartList = newList;\n    },\n    // 点击选中/取消购物车商品\n    toggleCheck(state, goodsId) {\n      const goods = state.cartList.find(item => item.goods_id === goodsId);\n      goods.ischecked = !goods.ischecked;\n    },\n    // 全选|反选\n    toggleAllCheck(state, flag) {\n      state.cartList.forEach(item => {\n        item.ischecked = flag;\n      });\n    },\n    // 修改本地购物车数量\n    changeCount(state, {\n      goodsId,\n      value\n    }) {\n      const obj = state.cartList.find(item => item.goods_id === goodsId);\n      obj.goods_num = value;\n    }\n  },\n  actions: {\n    async getCartAction(context) {\n      const {\n        data\n      } = await getCartList();\n      //   后台返回的数据中,不包含复选框选中状态,为了实现将来的功能\n      // 后台手动维护数据,给每一项,添加一个isChencked转态\n      data.list.forEach(item => {\n        item.ischecked = true;\n      });\n      context.commit('setCartList', data.list);\n    },\n    // 修改购物车数量\n    async changeCountAction(context, obj) {\n      const {\n        goodsId,\n        value,\n        skuId\n      } = obj;\n      context.commit('changeCount', {\n        goodsId,\n        value\n      });\n      await changeCount(goodsId, value, skuId);\n    },\n    // 删除购物车数据\n    async delSelect(context) {}\n  },\n  getters: {\n    // 获取商品总数\n    cartTotal(state) {\n      return state.cartList.reduce((sum, item) => {\n        sum += item.goods_num;\n        return sum;\n      }, 0);\n    },\n    // 选中商品的列表\n    selCartList(state) {\n      return state.cartList.filter(item => {\n        return item.ischecked;\n      });\n    },\n    // 选中的商品总数\n    // 如果想要使用 getters中的其它数据可以在函数的形参位置使用getters,然后在语句中使用getters.XXX就能获取到数据.\n    selCount(state, getters) {\n      return getters.selCartList.reduce((sum, item) => sum + item.goods_num, 0);\n    },\n    // 选中商品总价\n    selPrice(state, getters) {\n      return getters.selCartList.reduce((sum, item) => {\n        return sum + item.goods_num * item.goods.goods_price_min;\n      }, 0).toFixed(2);\n    },\n    // 当商品全部选中时，底部全选按钮选中\n    isAllChecked(state) {\n      return state.cartList.every(item => item.ischecked);\n    }\n  }\n};","map":{"version":3,"names":["changeCount","getCartList","namespaced","state","cartList","mutations","setCartList","newList","toggleCheck","goodsId","goods","find","item","goods_id","ischecked","toggleAllCheck","flag","forEach","value","obj","goods_num","actions","getCartAction","context","data","list","commit","changeCountAction","skuId","delSelect","getters","cartTotal","reduce","sum","selCartList","filter","selCount","selPrice","goods_price_min","toFixed","isAllChecked","every"],"sources":["E:/文档/VUE/VUE2/shopping-mode/shopping/src/store/modules/cart.js"],"sourcesContent":["import { changeCount, getCartList } from '@/api/cart'\r\nexport default {\r\n  namespaced: true,\r\n  state () {\r\n    return {\r\n      cartList: []\r\n    }\r\n  },\r\n  mutations: {\r\n    // 提供一个设置cartList 的mutation\r\n    setCartList (state, newList) {\r\n      state.cartList = newList\r\n    },\r\n    // 点击选中/取消购物车商品\r\n    toggleCheck (state, goodsId) {\r\n      const goods = state.cartList.find(item => item.goods_id === goodsId)\r\n      goods.ischecked = !goods.ischecked\r\n    },\r\n    // 全选|反选\r\n    toggleAllCheck (state, flag) {\r\n      state.cartList.forEach(item => {\r\n        item.ischecked = flag\r\n      })\r\n    },\r\n    // 修改本地购物车数量\r\n    changeCount (state, { goodsId, value }) {\r\n      const obj = state.cartList.find(item => item.goods_id === goodsId)\r\n      obj.goods_num = value\r\n    }\r\n  },\r\n  actions: {\r\n    async getCartAction (context) {\r\n      const { data } = await getCartList()\r\n      //   后台返回的数据中,不包含复选框选中状态,为了实现将来的功能\r\n      // 后台手动维护数据,给每一项,添加一个isChencked转态\r\n      data.list.forEach(item => {\r\n        item.ischecked = true\r\n      })\r\n      context.commit('setCartList', data.list)\r\n    },\r\n    // 修改购物车数量\r\n    async changeCountAction (context, obj) {\r\n      const { goodsId, value, skuId } = obj\r\n      context.commit('changeCount', {\r\n        goodsId,\r\n        value\r\n      })\r\n      await changeCount(goodsId, value, skuId)\r\n    },\r\n    // 删除购物车数据\r\n    async delSelect (context) {\r\n\r\n    }\r\n\r\n  },\r\n  getters: {\r\n    // 获取商品总数\r\n    cartTotal (state) {\r\n      return state.cartList.reduce((sum, item) => {\r\n        sum += item.goods_num\r\n        return sum\r\n      }, 0)\r\n    },\r\n    // 选中商品的列表\r\n    selCartList (state) {\r\n      return state.cartList.filter(item => {\r\n        return item.ischecked\r\n      })\r\n    },\r\n    // 选中的商品总数\r\n    // 如果想要使用 getters中的其它数据可以在函数的形参位置使用getters,然后在语句中使用getters.XXX就能获取到数据.\r\n    selCount (state, getters) {\r\n      return getters.selCartList.reduce((sum, item) => sum + item.goods_num, 0)\r\n    },\r\n    // 选中商品总价\r\n    selPrice (state, getters) {\r\n      return getters.selCartList.reduce((sum, item) => {\r\n        return sum + item.goods_num * item.goods.goods_price_min\r\n      }, 0).toFixed(2)\r\n    },\r\n    // 当商品全部选中时，底部全选按钮选中\r\n    isAllChecked (state) {\r\n      return state.cartList.every(item => item.ischecked)\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}